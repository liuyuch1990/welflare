package ${packageName};



import cn.hutool.core.date.DateUtil;
import cn.hutool.core.io.IoUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.poi.excel.ExcelUtil;
import cn.hutool.poi.excel.ExcelWriter;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.conditions.query.LambdaQueryChainWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.unicorn.wsp.common.annotation.Excel;
import com.unicorn.wsp.common.result.Result;
import ${table.basePackageName}.entity.${table.EntityClassName};
import ${table.basePackageName}.entity.exportvo.${table.EntityClassName}ETO;
import ${table.basePackageName}.entity.vo.${table.EntityClassName}VO;
import ${table.basePackageName}.mapper.${table.EntityClassName}Mapper;
import ${table.basePackageName}.service.${table.EntityClassName}Service;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
/**
* <p>
    *  ${table.comment}服务类
    * </p>
*
* @author spark
* @since 1.0
*/
@Service
public class ${table.ServiceImplClassName} extends ServiceImpl<${table.EntityClassName}Mapper,${table.EntityClassName}>
    implements ${table.ServiceClassName} {


    @Override
    public ${table.EntityClassName} getInfoById(Long id) {
        return super.getById(id);
    }

    @Override
    public boolean save(${table.EntityClassName}VO dto) {
        ${table.EntityClassName} entity = new ${table.EntityClassName}();
        BeanUtils.copyProperties(dto, entity);
        return super.save(entity);
    }

    @Override
    public boolean updateById(${table.EntityClassName}VO dto) {
        ${table.EntityClassName} entity = new ${table.EntityClassName}();
        BeanUtils.copyProperties(dto, entity);
        return super.updateById(entity);
    }

    @Override
    public boolean removeById(Long id) {
        return super.removeById(id);
    }

    @Override
    public IPage<${table.EntityClassName}> page(${table.EntityClassName}VO dto) {
        LambdaQueryWrapper<${table.EntityClassName}> queryWrapper = new LambdaQueryWrapper<>();
        if (ObjectUtil.isNotNull(dto)) {

        }
        Page<${table.EntityClassName}> page = new Page<>(dto.getPageNum(), dto.getPageSize());
        return this.page(page, queryWrapper);
    }
}
